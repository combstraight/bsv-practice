import "util.scrypt";
import "serializer.scrypt";

// Perceptron's internal state includes 2 inputs: height & weight
struct State {
	int heightWeight;
	// 1st weight means weight in KGs
	int weightWeight;
	int bias;
}

struct Input {
	// in CMs
	int height;
	// in KGs
	int weight;
}

// correct classification of gender: 0 means female, 1 male
type Output = int;

/*
 * A simple perceptron classifying gender based on height & weight
 */
contract Perceptron {
	// sample size
	static const int N = 10;
	// learning rate
	static const int LR = 1;

	// training data set
	// inputs
	Input[N] inputs;
	// outputs
	Output[N] outputs;

	// train the perceptron
	function train(State s) : State {
		loop (N) : i {
			int prediction = this.predict(s, i);
			int delta = this.outputs[i] - prediction;
			s = this.adjust(s, delta);
		}
		return s;
	}

	// prediction for the i-th input
	function predict(State s, int i) : int {
		int sum = s.bias;
		sum += this.inputs[i].height * s.heightWeight + this.inputs[i].weight * s.weightWeight;
		return stepActivate(sum);
	}

	// learn internal state
	function adjust(State s, int delta) : State {
		int scaledDelta = delta * LR;
		loop (N) : i {
			s.heightWeight += this.inputs[i].height * scaledDelta;
			s.weightWeight += this.inputs[i].weight * scaledDelta;
		}
		s.bias += scaledDelta;
		return s;
	}

	// binary step function
	static function stepActivate(int sum): int {
		return (sum >= 0 ? 1 : 0);
	}

	public function main(SigHashPreimage txPreimage, int amount) {
        require(Tx.checkPreimage(txPreimage));
        bytes scriptCode = Util.scriptCode(txPreimage);
		
		// read/deserialize state
		int stateStart = Reader.getStateStart(scriptCode);
		State state = this.deserialize(scriptCode[stateStart :]);

		// train the perceptron
		state = this.train(state);
		
		// write/serialize state
    	bytes stateBuf = serialize(state);
		
		bytes scriptCode_ = scriptCode[: stateStart] + stateBuf;
		bytes output = Util.buildOutput(scriptCode_, amount);
		require(hash256(output) == Util.hashOutputs(txPreimage));
    }

	function deserialize(bytes buf): State {
		Reader r = new Reader(buf);
		auto height = r.readInt();
		auto weight = r.readInt();
		auto bias = r.readInt();

		return {height, weight, bias};
	}

	static function serialize(State s): bytes {
		bytes sBuf = Writer.writeInt(s.heightWeight) + Writer.writeInt(s.weightWeight) + Writer.writeInt(s.bias);
		return Writer.serializeState(sBuf);
	}
}